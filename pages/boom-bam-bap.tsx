// https://github.com/sickdyd/react-flashlight/blob/master/src/ReactFlashlight.js
// https://github.com/sickdyd/react-flashlight-demo/blob/master/src/App.js
import type { NextPage } from "next";
import Head from "next/head";
import React, { useEffect, useState } from "react";
// import { ReactFlashlight } from "react-flashlight";
import flashStyle from "../styles/index.module.scss";
import { Howl, Howler } from "howler";
import clientPromise from "../lib/mongodb";

// https://github.com/goldfire/howler.js#quick-start

// import index from '../pages/index.module.scss'

// export async function getServerSideProps() {
//   const res = await fetch('https://api.jokes.one/knock-knock/random')
//   const joke = await res.json()
//   return {
//     props: {
//       joke
//     }
//   }
// }
const isWindowContext = typeof window !== "undefined";
const x: number = (isWindowContext && window.innerWidth / 2) as number;
const y: number = (isWindowContext && window.innerHeight / 2) as number;
const BoomBamBap: NextPage = ({ jokes }) => {
  // const { results = [] } = joke
  // console.log(joke);
  // console.log(results);

  function boomBapPow() {
    const sound = new Howl({
      src: ["boom-bap-POW.mp3"],
    });
    sound.once("load", function () {
      sound.play();
    });
  }
  function gotchaBitch() {
    const sound = new Howl({
      src: ["gotcha-bitch.mp3"],
    });
    sound.play();
  }
  function horn() {
    var sound = new Howl({
      src: ["air-horn.mp3"],
    });

    // Clear listener after first call.
    sound.once("load", function () {
      sound.play();
    });

    // // Fires when the sound finishes playing.
    // sound.on("end", function () {
    //   console.log("Finished!");
    // });
  }

  // const [position, setPosition] = useState({ x: x, y: y });
  // const [enabled, setEnabled] = useState(true);

  let knock: string = "";
  let who: string = "";
  // const [usedIDs, setUsedIDs] = useState(() => {
  //   if (typeof window !== "undefined") {
  //     const saved: string = localStorage.getItem("usedIDs") as string;
  //     const initialValue = JSON.parse(saved);
  //     var list: string[] = [] as string[];
  //     for (var i in initialValue) {
  //       list.push(initialValue[i]);
  //     }
  //     return list || ([] as string[]);
  //   }
  // });
  // from local storage, get the used IDs
  var counter = 0;
  const [usedIDs, setUsedIDs] = useState(() => {
    const usedID = new Set();

    if (typeof window !== "undefined") {
      const saved = JSON.parse(localStorage.getItem("usedIDs") as string);
      if (saved) {
        for (const i in saved.length) {
          usedID.add(saved[i]);
        }
      }
    }
    return usedID;
  });
  // jokes.every((joke) => {
  for (let joke of jokes) {
    console.log(usedIDs);
    // if (counter = 1) {
    //   return false;
    // }
    if (!usedIDs.has(joke._id)) {
      // problem here
      console.log(joke);

      usedIDs.add(joke._id);
      knock = joke["who's-there"];
      who = joke["who"];
      counter++;
      console.log(usedIDs);

      break;
    }
    if (counter == Object.keys(jokes).length) {
      knock = "1";
      who = "2";
    }
    // return true;
  }
  useEffect(() => {
    // runs when the page runs
    // setPosition({ x: x, y: y });
    boomBapPow();
    // const saved: string = localStorage.getItem("usedIDs") as string;
  }, []);

  useEffect(() => {
    localStorage.setItem("usedIDs", JSON.stringify(Array.from(usedIDs)));
    // usedIDs = new Set();
  }, [usedIDs]);

  return (
    <div className={flashStyle.fullScreen}>
      <Head>
        <title>Knock Knock</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/torch.svg" />
      </Head>
      {/* <ReactFlashlight
        enabled={enabled}
        initialPosition={position}
        size={0}
        // darkness={.85}
        enableMouse={true}
        showCursor={true}
      > */}
      <div
        className={flashStyle.animatedGrid}
        // onClick={() => setEnabled(!enabled)}
      >
        <div className={flashStyle.k}>
          <h1 className={flashStyle.center}>knock knock...</h1>
        </div>
        <div className={flashStyle.w}>
          <h1 className={flashStyle.center}>who&apos;s there?</h1>
        </div>
        <div className={flashStyle.req}>
          <h1 className={flashStyle.center}>{knock}</h1>
        </div>
        <div className={flashStyle.res}>
          <h1 className={flashStyle.center}>{knock} who?</h1>
        </div>
        <div
          className={flashStyle.star}
          // onMouseEnter={horn}
          // onMouseLeave={gotchaBitch}
        >
          <h1 className={flashStyle.center}>{who}</h1>
        </div>
      </div>
      {/* </ReactFlashlight> */}
    </div>
  );
};

export default BoomBamBap;

export async function getServerSideProps(context: any) {
  const client = await clientPromise;

  const db = client.db("knock-knock");

  let jokes = await db.collection("jokes").find({}).toArray();
  // jokes = JSON.parse(JSON.stringify(jokes));

  return {
    props: {
      jokes: JSON.parse(JSON.stringify(jokes)),
    },
  };
}
